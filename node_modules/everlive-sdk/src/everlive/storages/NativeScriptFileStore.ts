import { FileStore } from './FileStore';

export class NativeScriptFileStore implements FileStore {
    readonly filesDirectoryPath: string;
    private readonly fs: any;

    constructor(
        public storagePath: string,
        public options: any
    ) {
        this.options = options;
        try {
            this.fs = require('file-system');
        } catch (err) { throw err; } // because of webpack external dependency declaration - this marks it as optional
        this.filesDirectoryPath = this.fs.path.join(this.fs.knownFolders.documents().path, storagePath);
    }

    getErrorHandler(callback: Function) {
        return function (e) {
            callback && callback(e);
        }
    }

    removeFilesDirectory() {
        return this.getFilesDirectory()
            .then(dir => dir.remove());
    }

    removeFile(fileEntry) {
        return fileEntry.remove();
    }

    readFileAsText(fileEntry) {
        return fileEntry.readText();
    }

    writeTextToFile(fileEntry, content) {
        return fileEntry.writeText(content);
    }

    getFile(path) {
        return this.getFilesDirectory()
            .then((directoryEntry: any) => {
                const fullFilePath = this.fs.path.join(directoryEntry.path, path);
                return this.fs.File.fromPath(fullFilePath);
            });
    }

    getFilesDirectory() {
        const filesDirectory = this.fs.Folder.fromPath(this.filesDirectoryPath);
        return Promise.resolve(filesDirectory);
    }

    getFilesDirectoryPath(): string {
        return this.filesDirectoryPath;
    }

    // TODO: [offline] Implement
    writeText(fileName: string, text: string, path?: string) {
        throw new Error('Not implemented');
    }

    // TODO: [offline] Implement
    createDirectory() {
        throw new Error('Not implemented');
    }

    // TODO: [offline] Implement
    getFileSize(file: string, getFileSize: string) {
        throw new Error('Not implemented');
    }

    // TODO: [offline] Implement
    getFileByAbsolutePath(path: string) {
        throw new Error('Not implemented');
    }

    readFileAsBase64(file) {
        throw new Error('Not implemented');
    }

    renameFile() {
        throw new Error('Not implemented');
    }
}